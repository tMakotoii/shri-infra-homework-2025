name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g. 1 or 1_fix1)"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Deploy container
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script_timeout: 5m
          script: |
            set -ex  # Включить вывод команд и прерывание при ошибках

            # 1. Авторизация и загрузка образа
            echo "${{ secrets.YC_TOKEN }}" | docker login --username iam --password-stdin cr.yandex
            docker pull cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ inputs.version }}_latest

            # 2. Остановка старого контейнера (если есть)
            if docker ps -a | grep -q app; then
              docker stop app || true
              docker rm app || true
              echo "Старый контейнер удален"
            else
              echo "Предыдущий контейнер не найден - пропускаем удаление"
            fi

            # 3. Запуск нового контейнера
            docker run -d \
              --name app \
              --restart unless-stopped \
              -p 80:3000 \
              -e NODE_ENV=production \
              cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ inputs.version }}_latest

            # 4. Проверка запуска
            sleep 10  # Даем время на запуск
            docker ps --filter name=app --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          set -e

          # Проверяем, что контейнер существует и работает
          if ! docker ps --format '{{.Names}}' | grep -q '^app$'; then
            echo "::error::Контейнер 'app' не запущен"
            echo "Список контейнеров:"
            docker ps -a
            exit 1
          fi

          # Проверяем доступность приложения
          if ! curl -sSf --retry 3 --max-time 10 http://localhost:3000/hw/store; then
            echo "::error::Приложение не отвечает"
            echo "Логи контейнера:"
            docker logs app
            exit 1
          fi

          echo "✅ Проверка пройдена"
          EOF
